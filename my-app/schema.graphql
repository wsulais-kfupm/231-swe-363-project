"""A high precision floating point value represented as a string"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
  eq: BigFloat
  gt: BigFloat
  gte: BigFloat
  in: [BigFloat!]
  is: FilterIs
  lt: BigFloat
  lte: BigFloat
  neq: BigFloat
}

"""An arbitrary size integer represented as a string"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is: FilterIs
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  is: FilterIs
}

type Brand implements Node {
  name: Opaque

  """Globally Unique Record Identifier"""
  nodeId: ID!
  productCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductOrderBy!]
  ): ProductConnection
  slug: String!
}

type BrandConnection {
  edges: [BrandEdge!]!
  pageInfo: PageInfo!
}

type BrandDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Brand!]!
}

type BrandEdge {
  cursor: String!
  node: Brand!
}

input BrandFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [BrandFilter!]
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: BrandFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [BrandFilter!]
  slug: StringFilter
}

input BrandInsertInput {
  name: Opaque
  slug: String
}

type BrandInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Brand!]!
}

input BrandOrderBy {
  name: OrderByDirection
  slug: OrderByDirection
}

input BrandUpdateInput {
  name: Opaque
  slug: String
}

type BrandUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Brand!]!
}

type Category implements Node {
  category: Category
  categoryCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: CategoryFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [CategoryOrderBy!]
  ): CategoryConnection
  id: BigInt!
  market: Market
  name: Opaque

  """Globally Unique Record Identifier"""
  nodeId: ID!
  parent: BigInt
  productCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductOrderBy!]
  ): ProductConnection
  slug: String
}

type CategoryConnection {
  edges: [CategoryEdge!]!
  pageInfo: PageInfo!

  """The total number of records matching the `filter` criteria"""
  totalCount: Int!
}

type CategoryDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Category!]!
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

input CategoryFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [CategoryFilter!]
  id: BigIntFilter
  market: StringFilter
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: CategoryFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [CategoryFilter!]
  parent: BigIntFilter
  slug: StringFilter
}

input CategoryInsertInput {
  market: String
  name: Opaque
  parent: BigInt
  slug: String
}

type CategoryInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Category!]!
}

input CategoryOrderBy {
  id: OrderByDirection
  market: OrderByDirection
  name: OrderByDirection
  parent: OrderByDirection
  slug: OrderByDirection
}

input CategoryUpdateInput {
  market: String
  name: Opaque
  parent: BigInt
  slug: String
}

type CategoryUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Category!]!
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""A date wihout time information"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  is: FilterIs
  lt: Date
  lte: Date
  neq: Date
}

"""A date and time"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  is: FilterIs
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

enum FilterIs {
  NOT_NULL
  NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: FilterIs
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
  eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: FilterIs
  lt: Int
  lte: Int
  neq: Int
}

"""A Javascript Object Notation value serialized as a string"""
scalar JSON

type Market implements Node {
  categoryCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: CategoryFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [CategoryOrderBy!]
  ): CategoryConnection
  id: String!
  name: Opaque!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  storeCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: StoreFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [StoreOrderBy!]
  ): StoreConnection
}

type MarketConnection {
  edges: [MarketEdge!]!
  pageInfo: PageInfo!

  """The total number of records matching the `filter` criteria"""
  totalCount: Int!
}

type MarketDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Market!]!
}

type MarketEdge {
  cursor: String!
  node: Market!
}

input MarketFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [MarketFilter!]
  id: StringFilter
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: MarketFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [MarketFilter!]
}

input MarketInsertInput {
  id: String
  name: Opaque
}

type MarketInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Market!]!
}

input MarketOrderBy {
  id: OrderByDirection
  name: OrderByDirection
}

input MarketUpdateInput {
  id: String
  name: Opaque
}

type MarketUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Market!]!
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the `Brand` collection"""
  deleteFromBrandCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: BrandFilter
  ): BrandDeleteResponse!

  """Deletes zero or more records from the `Category` collection"""
  deleteFromCategoryCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: CategoryFilter
  ): CategoryDeleteResponse!

  """Deletes zero or more records from the `Market` collection"""
  deleteFromMarketCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: MarketFilter
  ): MarketDeleteResponse!

  """Deletes zero or more records from the `Notified` collection"""
  deleteFromNotifiedCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: NotifiedFilter
  ): NotifiedDeleteResponse!

  """Deletes zero or more records from the `PriceDelta` collection"""
  deleteFromPriceDeltaCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: PriceDeltaFilter
  ): PriceDeltaDeleteResponse!

  """Deletes zero or more records from the `Product` collection"""
  deleteFromProductCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductFilter
  ): ProductDeleteResponse!

  """Deletes zero or more records from the `ProductListing` collection"""
  deleteFromProductListingCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductListingFilter
  ): ProductListingDeleteResponse!

  """Deletes zero or more records from the `ProductPricing` collection"""
  deleteFromProductPricingCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductPricingFilter
  ): ProductPricingDeleteResponse!

  """Deletes zero or more records from the `ProductQuantity` collection"""
  deleteFromProductQuantityCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductQuantityFilter
  ): ProductQuantityDeleteResponse!

  """Deletes zero or more records from the `ProductVariant` collection"""
  deleteFromProductVariantCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductVariantFilter
  ): ProductVariantDeleteResponse!

  """Deletes zero or more records from the `Store` collection"""
  deleteFromStoreCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: StoreFilter
  ): StoreDeleteResponse!

  """Deletes zero or more records from the `Webuser` collection"""
  deleteFromWebuserCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: WebuserFilter
  ): WebuserDeleteResponse!

  """Adds one or more `Brand` records to the collection"""
  insertIntoBrandCollection(objects: [BrandInsertInput!]!): BrandInsertResponse

  """Adds one or more `Category` records to the collection"""
  insertIntoCategoryCollection(objects: [CategoryInsertInput!]!): CategoryInsertResponse

  """Adds one or more `Market` records to the collection"""
  insertIntoMarketCollection(objects: [MarketInsertInput!]!): MarketInsertResponse

  """Adds one or more `Notified` records to the collection"""
  insertIntoNotifiedCollection(objects: [NotifiedInsertInput!]!): NotifiedInsertResponse

  """Adds one or more `PriceDelta` records to the collection"""
  insertIntoPriceDeltaCollection(objects: [PriceDeltaInsertInput!]!): PriceDeltaInsertResponse

  """Adds one or more `Product` records to the collection"""
  insertIntoProductCollection(objects: [ProductInsertInput!]!): ProductInsertResponse

  """Adds one or more `ProductListing` records to the collection"""
  insertIntoProductListingCollection(objects: [ProductListingInsertInput!]!): ProductListingInsertResponse

  """Adds one or more `ProductPricing` records to the collection"""
  insertIntoProductPricingCollection(objects: [ProductPricingInsertInput!]!): ProductPricingInsertResponse

  """Adds one or more `ProductQuantity` records to the collection"""
  insertIntoProductQuantityCollection(objects: [ProductQuantityInsertInput!]!): ProductQuantityInsertResponse

  """Adds one or more `ProductVariant` records to the collection"""
  insertIntoProductVariantCollection(objects: [ProductVariantInsertInput!]!): ProductVariantInsertResponse

  """Adds one or more `Store` records to the collection"""
  insertIntoStoreCollection(objects: [StoreInsertInput!]!): StoreInsertResponse

  """Adds one or more `Webuser` records to the collection"""
  insertIntoWebuserCollection(objects: [WebuserInsertInput!]!): WebuserInsertResponse

  """Updates zero or more records in the `Brand` collection"""
  updateBrandCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: BrandFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: BrandUpdateInput!
  ): BrandUpdateResponse!

  """Updates zero or more records in the `Category` collection"""
  updateCategoryCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: CategoryFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: CategoryUpdateInput!
  ): CategoryUpdateResponse!

  """Updates zero or more records in the `Market` collection"""
  updateMarketCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: MarketFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: MarketUpdateInput!
  ): MarketUpdateResponse!

  """Updates zero or more records in the `Notified` collection"""
  updateNotifiedCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: NotifiedFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: NotifiedUpdateInput!
  ): NotifiedUpdateResponse!

  """Updates zero or more records in the `PriceDelta` collection"""
  updatePriceDeltaCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: PriceDeltaFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PriceDeltaUpdateInput!
  ): PriceDeltaUpdateResponse!

  """Updates zero or more records in the `Product` collection"""
  updateProductCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProductUpdateInput!
  ): ProductUpdateResponse!

  """Updates zero or more records in the `ProductListing` collection"""
  updateProductListingCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductListingFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProductListingUpdateInput!
  ): ProductListingUpdateResponse!

  """Updates zero or more records in the `ProductPricing` collection"""
  updateProductPricingCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductPricingFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProductPricingUpdateInput!
  ): ProductPricingUpdateResponse!

  """Updates zero or more records in the `ProductQuantity` collection"""
  updateProductQuantityCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductQuantityFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProductQuantityUpdateInput!
  ): ProductQuantityUpdateResponse!

  """Updates zero or more records in the `ProductVariant` collection"""
  updateProductVariantCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: ProductVariantFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: ProductVariantUpdateInput!
  ): ProductVariantUpdateResponse!

  """Updates zero or more records in the `Store` collection"""
  updateStoreCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: StoreFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: StoreUpdateInput!
  ): StoreUpdateResponse!

  """Updates zero or more records in the `Webuser` collection"""
  updateWebuserCollection(
    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1

    """Restricts the mutation's impact to records matching the criteria"""
    filter: WebuserFilter

    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: WebuserUpdateInput!
  ): WebuserUpdateResponse!
}

interface Node {
  """Retrieves a record by `ID`"""
  nodeId: ID!
}

type Notified implements Node {
  cookie: Webuser!
  cookieId: String!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  var: ProductVariant!
  varId: Int!
}

type NotifiedConnection {
  edges: [NotifiedEdge!]!
  pageInfo: PageInfo!
}

type NotifiedDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Notified!]!
}

type NotifiedEdge {
  cursor: String!
  node: Notified!
}

input NotifiedFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [NotifiedFilter!]
  cookieId: StringFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: NotifiedFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [NotifiedFilter!]
  varId: IntFilter
}

input NotifiedInsertInput {
  cookieId: String
  varId: Int
}

type NotifiedInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Notified!]!
}

input NotifiedOrderBy {
  cookieId: OrderByDirection
  varId: OrderByDirection
}

input NotifiedUpdateInput {
  cookieId: String
  varId: Int
}

type NotifiedUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Notified!]!
}

"""Any type not handled by the type system"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
  eq: Opaque
  is: FilterIs
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PriceDelta implements Node {
  currency: String
  delta: BigFloat
  listing: Int

  """Globally Unique Record Identifier"""
  nodeId: ID!
  price: BigFloat
  productListing: ProductListing
  scrapedAt: Datetime
}

type PriceDeltaConnection {
  edges: [PriceDeltaEdge!]!
  pageInfo: PageInfo!
}

type PriceDeltaDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PriceDelta!]!
}

type PriceDeltaEdge {
  cursor: String!
  node: PriceDelta!
}

input PriceDeltaFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [PriceDeltaFilter!]
  currency: StringFilter
  delta: BigFloatFilter
  listing: IntFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: PriceDeltaFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [PriceDeltaFilter!]
  price: BigFloatFilter
  scrapedAt: DatetimeFilter
}

input PriceDeltaInsertInput {
  currency: String
  delta: BigFloat
  listing: Int
  price: BigFloat
  scrapedAt: Datetime
}

type PriceDeltaInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PriceDelta!]!
}

input PriceDeltaOrderBy {
  currency: OrderByDirection
  delta: OrderByDirection
  listing: OrderByDirection
  price: OrderByDirection
  scrapedAt: OrderByDirection
}

input PriceDeltaUpdateInput {
  currency: String
  delta: BigFloat
  listing: Int
  price: BigFloat
  scrapedAt: Datetime
}

type PriceDeltaUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [PriceDelta!]!
}

type Product implements Node {
  brand: Brand!
  category: Category
  img: String
  name: Opaque!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  pnameSlug: String!
  productQuantityCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductQuantityFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductQuantityOrderBy!]
  ): ProductQuantityConnection
  productVariantCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductVariantFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductVariantOrderBy!]
  ): ProductVariantConnection
}

type ProductConnection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!

  """The total number of records matching the `filter` criteria"""
  totalCount: Int!
}

type ProductDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Product!]!
}

type ProductEdge {
  cursor: String!
  node: Product!
}

input ProductFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [ProductFilter!]
  brand: StringFilter
  category: BigIntFilter
  img: StringFilter
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: ProductFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [ProductFilter!]
  pnameSlug: StringFilter
}

input ProductInsertInput {
  brand: String
  category: BigInt
  img: String
  name: Opaque
  pnameSlug: String
}

type ProductInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Product!]!
}

type ProductListing implements Node {
  image: String
  listingId: Int!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  priceDeltaCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PriceDeltaFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [PriceDeltaOrderBy!]
  ): PriceDeltaConnection
  productPricingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductPricingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductPricingOrderBy!]
  ): ProductPricingConnection
  productQuantity: ProductQuantity
  productVariant: ProductVariant!
  quantity: BigInt
  store: Store!
  url: String
  variant: Int!
}

type ProductListingConnection {
  edges: [ProductListingEdge!]!
  pageInfo: PageInfo!
}

type ProductListingDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductListing!]!
}

type ProductListingEdge {
  cursor: String!
  node: ProductListing!
}

input ProductListingFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [ProductListingFilter!]
  image: StringFilter
  listingId: IntFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: ProductListingFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [ProductListingFilter!]
  quantity: BigIntFilter
  store: StringFilter
  url: StringFilter
  variant: IntFilter
}

input ProductListingInsertInput {
  image: String
  listingId: Int
  quantity: BigInt
  store: String
  url: String
  variant: Int
}

type ProductListingInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductListing!]!
}

input ProductListingOrderBy {
  image: OrderByDirection
  listingId: OrderByDirection
  quantity: OrderByDirection
  store: OrderByDirection
  url: OrderByDirection
  variant: OrderByDirection
}

input ProductListingUpdateInput {
  image: String
  listingId: Int
  quantity: BigInt
  store: String
  url: String
  variant: Int
}

type ProductListingUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductListing!]!
}

input ProductOrderBy {
  brand: OrderByDirection
  category: OrderByDirection
  img: OrderByDirection
  name: OrderByDirection
  pnameSlug: OrderByDirection
}

type ProductPricing implements Node {
  currency: String!
  listing: Int!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  price: BigFloat!
  productListing: ProductListing!
  scrapedAt: Datetime!
}

type ProductPricingConnection {
  edges: [ProductPricingEdge!]!
  pageInfo: PageInfo!
}

type ProductPricingDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductPricing!]!
}

type ProductPricingEdge {
  cursor: String!
  node: ProductPricing!
}

input ProductPricingFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [ProductPricingFilter!]
  currency: StringFilter
  listing: IntFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: ProductPricingFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [ProductPricingFilter!]
  price: BigFloatFilter
  scrapedAt: DatetimeFilter
}

input ProductPricingInsertInput {
  currency: String
  listing: Int
  price: BigFloat
  scrapedAt: Datetime
}

type ProductPricingInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductPricing!]!
}

input ProductPricingOrderBy {
  currency: OrderByDirection
  listing: OrderByDirection
  price: OrderByDirection
  scrapedAt: OrderByDirection
}

input ProductPricingUpdateInput {
  currency: String
  listing: Int
  price: BigFloat
  scrapedAt: Datetime
}

type ProductPricingUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductPricing!]!
}

type ProductQuantity implements Node {
  count: Int
  id: BigInt!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  product: Product
  productListingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductListingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductListingOrderBy!]
  ): ProductListingConnection
  quantity: BigFloat
  unit: Unit
}

type ProductQuantityConnection {
  edges: [ProductQuantityEdge!]!
  pageInfo: PageInfo!
}

type ProductQuantityDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductQuantity!]!
}

type ProductQuantityEdge {
  cursor: String!
  node: ProductQuantity!
}

input ProductQuantityFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [ProductQuantityFilter!]
  count: IntFilter
  id: BigIntFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: ProductQuantityFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [ProductQuantityFilter!]
  product: StringFilter
  quantity: BigFloatFilter
  unit: UnitFilter
}

input ProductQuantityInsertInput {
  count: Int
  product: String
  quantity: BigFloat
  unit: Unit
}

type ProductQuantityInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductQuantity!]!
}

input ProductQuantityOrderBy {
  count: OrderByDirection
  id: OrderByDirection
  product: OrderByDirection
  quantity: OrderByDirection
  unit: OrderByDirection
}

input ProductQuantityUpdateInput {
  count: Int
  product: String
  quantity: BigFloat
  unit: Unit
}

type ProductQuantityUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductQuantity!]!
}

input ProductUpdateInput {
  brand: String
  category: BigInt
  img: String
  name: Opaque
  pnameSlug: String
}

type ProductUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Product!]!
}

type ProductVariant implements Node {
  name: Opaque

  """Globally Unique Record Identifier"""
  nodeId: ID!
  notifiedCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: NotifiedFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [NotifiedOrderBy!]
  ): NotifiedConnection!
  product: Product!
  productListingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductListingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductListingOrderBy!]
  ): ProductListingConnection
  slug: String!
  varId: Int!
}

type ProductVariantConnection {
  edges: [ProductVariantEdge!]!
  pageInfo: PageInfo!
}

type ProductVariantDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductVariant!]!
}

type ProductVariantEdge {
  cursor: String!
  node: ProductVariant!
}

input ProductVariantFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [ProductVariantFilter!]
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: ProductVariantFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [ProductVariantFilter!]
  product: StringFilter
  slug: StringFilter
  varId: IntFilter
}

input ProductVariantInsertInput {
  name: Opaque
  product: String
  slug: String
  varId: Int
}

type ProductVariantInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductVariant!]!
}

input ProductVariantOrderBy {
  name: OrderByDirection
  product: OrderByDirection
  slug: OrderByDirection
  varId: OrderByDirection
}

input ProductVariantUpdateInput {
  name: Opaque
  product: String
  slug: String
  varId: Int
}

type ProductVariantUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [ProductVariant!]!
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `Brand`"""
  brandCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: BrandFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [BrandOrderBy!]
  ): BrandConnection

  """A pagable collection of type `Category`"""
  categoryCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: CategoryFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [CategoryOrderBy!]
  ): CategoryConnection

  """A pagable collection of type `Market`"""
  marketCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: MarketFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [MarketOrderBy!]
  ): MarketConnection

  """Retrieve a record by its `ID`"""
  node(
    """The record's `ID`"""
    nodeId: ID!
  ): Node

  """A pagable collection of type `Notified`"""
  notifiedCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: NotifiedFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [NotifiedOrderBy!]
  ): NotifiedConnection

  """A pagable collection of type `PriceDelta`"""
  priceDeltaCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PriceDeltaFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [PriceDeltaOrderBy!]
  ): PriceDeltaConnection

  """A pagable collection of type `Product`"""
  productCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductOrderBy!]
  ): ProductConnection

  """A pagable collection of type `ProductListing`"""
  productListingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductListingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductListingOrderBy!]
  ): ProductListingConnection
  productListingPrice(listingId: BigInt): ProductPricing

  """A pagable collection of type `ProductPricing`"""
  productPricingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductPricingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductPricingOrderBy!]
  ): ProductPricingConnection

  """A pagable collection of type `ProductQuantity`"""
  productQuantityCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductQuantityFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductQuantityOrderBy!]
  ): ProductQuantityConnection

  """A pagable collection of type `ProductVariant`"""
  productVariantCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductVariantFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductVariantOrderBy!]
  ): ProductVariantConnection

  """A pagable collection of type `Store`"""
  storeCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: StoreFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [StoreOrderBy!]
  ): StoreConnection

  """A pagable collection of type `Webuser`"""
  webuserCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: WebuserFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [WebuserOrderBy!]
  ): WebuserConnection
}

type Store implements Node {
  country: String!
  market: Market!
  marketnameSlug: String!
  name: Opaque!

  """Globally Unique Record Identifier"""
  nodeId: ID!
  productListingCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: ProductListingFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [ProductListingOrderBy!]
  ): ProductListingConnection
  region: String
  website: String
}

type StoreConnection {
  edges: [StoreEdge!]!
  pageInfo: PageInfo!
}

type StoreDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Store!]!
}

type StoreEdge {
  cursor: String!
  node: Store!
}

input StoreFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [StoreFilter!]
  country: StringFilter
  market: StringFilter
  marketnameSlug: StringFilter
  name: OpaqueFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: StoreFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [StoreFilter!]
  region: StringFilter
  website: StringFilter
}

input StoreInsertInput {
  country: String
  market: String
  marketnameSlug: String
  name: Opaque
  region: String
  website: String
}

type StoreInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Store!]!
}

input StoreOrderBy {
  country: OrderByDirection
  market: OrderByDirection
  marketnameSlug: OrderByDirection
  name: OrderByDirection
  region: OrderByDirection
  website: OrderByDirection
}

input StoreUpdateInput {
  country: String
  market: String
  marketnameSlug: String
  name: Opaque
  region: String
  website: String
}

type StoreUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Store!]!
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  ilike: String
  in: [String!]
  iregex: String
  is: FilterIs
  like: String
  lt: String
  lte: String
  neq: String
  regex: String
  startsWith: String
}

"""A time without date information"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  is: FilterIs
  lt: Time
  lte: Time
  neq: Time
}

"""A universally unique identifier"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  is: FilterIs
  neq: UUID
}

enum Unit {
  acre
  bit
  byte
  celsius
  centimeter
  day
  degree
  fahrenheit
  fluid_ounce
  foot
  gallon
  gigabit
  gigabyte
  gram
  hectare
  hour
  inch
  kilobit
  kilobyte
  kilogram
  kilometer
  liter
  megabit
  megabyte
  meter
  microsecond
  mile
  mile_scandinavian
  milliliter
  millimeter
  millisecond
  minute
  month
  nanosecond
  ounce
  percent
  petabyte
  pound
  second
  stone
  terabit
  terabyte
  week
  yard
  year
}

"""
Boolean expression comparing fields on type "Unit"
"""
input UnitFilter {
  eq: Unit
  in: [Unit!]
  is: FilterIs
  neq: Unit
}

type Webuser implements Node {
  auth: String!
  cookieId: String!
  encodedVap: [BigInt]

  """Globally Unique Record Identifier"""
  nodeId: ID!
  notifiedCollection(
    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: NotifiedFilter

    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Sort order to apply to the collection"""
    orderBy: [NotifiedOrderBy!]
  ): NotifiedConnection!
  p256dh: String!
}

type WebuserConnection {
  edges: [WebuserEdge!]!
  pageInfo: PageInfo!
}

type WebuserDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Webuser!]!
}

type WebuserEdge {
  cursor: String!
  node: Webuser!
}

input WebuserFilter {
  """
  Returns true only if all its inner filters are true, otherwise returns false
  """
  and: [WebuserFilter!]
  auth: StringFilter
  cookieId: StringFilter
  nodeId: IDFilter

  """Negates a filter"""
  not: WebuserFilter

  """
  Returns true if at least one of its inner filters is true, otherwise returns false
  """
  or: [WebuserFilter!]
  p256dh: StringFilter
}

input WebuserInsertInput {
  auth: String
  cookieId: String
  encodedVap: [BigInt]
  p256dh: String
}

type WebuserInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Webuser!]!
}

input WebuserOrderBy {
  auth: OrderByDirection
  cookieId: OrderByDirection
  p256dh: OrderByDirection
}

input WebuserUpdateInput {
  auth: String
  cookieId: String
  encodedVap: [BigInt]
  p256dh: String
}

type WebuserUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Webuser!]!
}
